import {
  __commonJS,
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof3(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof3(obj);
    }
    module.exports = _typeof3, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof3 = require_typeof()["default"];
    function _regeneratorRuntime4() {
      "use strict";
      module.exports = _regeneratorRuntime4 = function _regeneratorRuntime5() {
        return exports2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
      }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        }), obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function define2(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
        return defineProperty(generator, "_invoke", {
          value: makeInvokeMethod(innerFn, self, context)
        }), generator;
      }
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      exports2.wrap = wrap;
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if ("throw" !== record.type) {
            var result = record.arg, value = result.value;
            return value && "object" == _typeof3(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
          reject(record.arg);
        }
        var previousPromise;
        defineProperty(this, "_invoke", {
          value: function value(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(innerFn, self, context) {
        var state = "suspendedStart";
        return function(method, arg) {
          if ("executing" === state)
            throw new Error("Generator is already running");
          if ("completed" === state) {
            if ("throw" === method)
              throw arg;
            return doneResult();
          }
          for (context.method = method, context.arg = arg; ; ) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if ("next" === context.method)
              context.sent = context._sent = context.arg;
            else if ("throw" === context.method) {
              if ("suspendedStart" === state)
                throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else
              "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);
            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                continue;
              return {
                value: record.arg,
                done: context.done
              };
            }
            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method, method = delegate.iterator[methodName];
        if (void 0 === method)
          return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type)
          return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }
      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod)
            return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next)
            return iterable;
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              for (; ++i < iterable.length; )
                if (hasOwn.call(iterable, i))
                  return next2.value = iterable[i], next2.done = false, next2;
              return next2.value = void 0, next2.done = true, next2;
            };
            return next.next = next;
          }
        }
        return {
          next: doneResult
        };
      }
      function doneResult() {
        return {
          value: void 0,
          done: true
        };
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports2.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports2.awrap = function(arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
      }), define(Gp, "toString", function() {
        return "[object Generator]";
      }), exports2.keys = function(val) {
        var object = Object(val), keys = [];
        for (var key in object)
          keys.push(key);
        return keys.reverse(), function next() {
          for (; keys.length; ) {
            var key2 = keys.pop();
            if (key2 in object)
              return next.value = key2, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, exports2.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
            for (var name in this)
              "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
        },
        stop: function stop() {
          this.done = true;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type)
            throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done)
            throw exception;
          var context = this;
          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i], record = entry.completion;
            if ("root" === entry.tryLoc)
              return handle("end");
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
              } else {
                if (!hasFinally)
                  throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type)
            throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc)
              return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
        }
      }, exports2;
    }
    module.exports = _regeneratorRuntime4, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}

// node_modules/@babel/runtime/helpers/esm/superPropBase.js
function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null)
      break;
  }
  return object;
}

// node_modules/@babel/runtime/helpers/esm/get.js
function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get2(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

// node_modules/helper-js/dist/helper-js.esm.js
var import_regenerator = __toESM(require_regenerator());

// node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}

// node_modules/@babel/runtime/helpers/esm/iterableToArray.js
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}

// node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

// node_modules/helper-js/dist/helper-js.esm.js
function _createSuper(Derived) {
  return function() {
    var Super = _getPrototypeOf(Derived), result;
    if (_isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var _marked = import_regenerator.default.mark(iterateAll);
function _createForOfIteratorHelper(o) {
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray2(o))) {
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var it, normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = o[Symbol.iterator]();
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var store = {};
function glb() {
  if (store.glb) {
    return store.glb;
  } else {
    var t;
    try {
      t = global;
    } catch (e) {
      t = window;
    }
    store.glb = t;
    return t;
  }
}
function isArray(v) {
  return Object.prototype.toString.call(v) === "[object Array]";
}
function isObject(v) {
  return Object.prototype.toString.call(v) === "[object Object]";
}
function numRand(min, max) {
  if (arguments.length === 1) {
    max = min;
    min = 0;
  }
  return Math.floor(Math.random() * (max - min + 1) + min);
}
function strRand() {
  var len = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
  var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var r = "";
  var seeds = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (var i = 0; i < len; i++) {
    r += seeds[numRand(seeds.length - 1)];
  }
  return prefix + r;
}
function arrayRemove(arr, v) {
  var index3;
  var count = 0;
  while ((index3 = arr.indexOf(v)) > -1) {
    arr.splice(index3, 1);
    count++;
  }
  return count;
}
function arrayLast(arr) {
  return arr[arr.length - 1];
}
function iterateAll(val) {
  var opt, i, info, _i7, _Object$keys2, key, _info, _i8, _info2, keys, _i9, _keys2, _key2, _info3, _args = arguments;
  return import_regenerator.default.wrap(function iterateAll$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          opt = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
          if (opt.reverse) {
            _context.next = 30;
            break;
          }
          if (!(val.length != null)) {
            _context.next = 14;
            break;
          }
          i = 0;
        case 4:
          if (!(i < val.length)) {
            _context.next = 12;
            break;
          }
          info = {
            value: val[i],
            index: i
          };
          if (!(!opt.exclude || !opt.exclude(info))) {
            _context.next = 9;
            break;
          }
          _context.next = 9;
          return info;
        case 9:
          i++;
          _context.next = 4;
          break;
        case 12:
          _context.next = 28;
          break;
        case 14:
          if (!isObject(val)) {
            _context.next = 27;
            break;
          }
          _i7 = 0, _Object$keys2 = Object.keys(val);
        case 16:
          if (!(_i7 < _Object$keys2.length)) {
            _context.next = 25;
            break;
          }
          key = _Object$keys2[_i7];
          _info = {
            value: val[key],
            key
          };
          if (!(!opt.exclude || !opt.exclude(_info))) {
            _context.next = 22;
            break;
          }
          _context.next = 22;
          return _info;
        case 22:
          _i7++;
          _context.next = 16;
          break;
        case 25:
          _context.next = 28;
          break;
        case 27:
          throw "Unsupported type";
        case 28:
          _context.next = 58;
          break;
        case 30:
          if (!(val.length != null)) {
            _context.next = 42;
            break;
          }
          _i8 = val.length - 1;
        case 32:
          if (!(_i8 >= 0)) {
            _context.next = 40;
            break;
          }
          _info2 = {
            value: val[_i8],
            index: _i8
          };
          if (!(!opt.exclude || !opt.exclude(_info2))) {
            _context.next = 37;
            break;
          }
          _context.next = 37;
          return _info2;
        case 37:
          _i8--;
          _context.next = 32;
          break;
        case 40:
          _context.next = 58;
          break;
        case 42:
          if (!isObject(val)) {
            _context.next = 57;
            break;
          }
          keys = Object.keys(val);
          keys.reverse();
          _i9 = 0, _keys2 = keys;
        case 46:
          if (!(_i9 < _keys2.length)) {
            _context.next = 55;
            break;
          }
          _key2 = _keys2[_i9];
          _info3 = {
            value: val[_key2],
            key: _key2
          };
          if (!(!opt.exclude || !opt.exclude(_info3))) {
            _context.next = 52;
            break;
          }
          _context.next = 52;
          return _info3;
        case 52:
          _i9++;
          _context.next = 46;
          break;
        case 55:
          _context.next = 58;
          break;
        case 57:
          throw "Unsupported type";
        case 58:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
function depthFirstSearch(obj, handler) {
  var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  var reverse = arguments.length > 3 ? arguments[3] : void 0;
  var rootChildren = isArray(obj) ? obj : [obj];
  var StopException = function StopException2() {
    _classCallCheck(this, StopException2);
  };
  var func = function func2(children, parent, parentPath) {
    if (reverse) {
      children = children.slice();
      children.reverse();
    }
    var len = children.length;
    for (var i = 0; i < len; i++) {
      var item = children[i];
      var index3 = reverse ? len - i - 1 : i;
      var path = parentPath ? [].concat(_toConsumableArray(parentPath), [index3]) : [];
      var r = handler(item, index3, parent, path);
      if (r === false) {
        throw new StopException();
      } else if (r === "skip children") {
        continue;
      } else if (r === "skip siblings") {
        break;
      }
      if (item[childrenKey] != null) {
        func2(item[childrenKey], item, path);
      }
    }
  };
  try {
    func(rootChildren, null, isArray(obj) ? [] : null);
  } catch (e) {
    if (e instanceof StopException)
      ;
    else {
      throw e;
    }
  }
}
var walkTreeData = depthFirstSearch;
var TreeData = function() {
  function TreeData3(data) {
    _classCallCheck(this, TreeData3);
    this.childrenKey = "children";
    this.data = data;
  }
  _createClass(TreeData3, [{
    key: "iteratePath",
    value: import_regenerator.default.mark(function iteratePath(path) {
      var opt, childrenKey, rootChildren, prevPath, prevChildren, _iterator5, _step5, index3, currentPath, currentNode, list, _iterator6, _step6, _step6$value, _path, node, _args2 = arguments;
      return import_regenerator.default.wrap(function iteratePath$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              opt = _args2.length > 1 && _args2[1] !== void 0 ? _args2[1] : {};
              childrenKey = this.childrenKey, rootChildren = this.rootChildren;
              if (opt.reverse) {
                _context2.next = 29;
                break;
              }
              prevPath = [];
              prevChildren = rootChildren;
              _iterator5 = _createForOfIteratorHelper(path);
              _context2.prev = 6;
              _iterator5.s();
            case 8:
              if ((_step5 = _iterator5.n()).done) {
                _context2.next = 19;
                break;
              }
              index3 = _step5.value;
              currentPath = [].concat(_toConsumableArray(prevPath), [index3]);
              currentNode = prevChildren[index3];
              _context2.next = 14;
              return {
                path: currentPath,
                node: currentNode
              };
            case 14:
              prevPath = currentPath;
              prevChildren = currentNode[childrenKey];
            case 17:
              _context2.next = 8;
              break;
            case 19:
              _context2.next = 24;
              break;
            case 21:
              _context2.prev = 21;
              _context2.t0 = _context2["catch"](6);
              _iterator5.e(_context2.t0);
            case 24:
              _context2.prev = 24;
              _iterator5.f();
              return _context2.finish(24);
            case 27:
              _context2.next = 48;
              break;
            case 29:
              list = _toConsumableArray(this.iteratePath(path, _objectSpread({}, opt, {
                reverse: false
              })));
              list.reverse();
              _iterator6 = _createForOfIteratorHelper(list);
              _context2.prev = 32;
              _iterator6.s();
            case 34:
              if ((_step6 = _iterator6.n()).done) {
                _context2.next = 40;
                break;
              }
              _step6$value = _step6.value, _path = _step6$value.path, node = _step6$value.node;
              _context2.next = 38;
              return {
                path: _path,
                node
              };
            case 38:
              _context2.next = 34;
              break;
            case 40:
              _context2.next = 45;
              break;
            case 42:
              _context2.prev = 42;
              _context2.t1 = _context2["catch"](32);
              _iterator6.e(_context2.t1);
            case 45:
              _context2.prev = 45;
              _iterator6.f();
              return _context2.finish(45);
            case 48:
            case "end":
              return _context2.stop();
          }
        }
      }, iteratePath, this, [[6, 21, 24, 27], [32, 42, 45, 48]]);
    })
  }, {
    key: "getAllNodes",
    value: function getAllNodes(path) {
      var all = [];
      var _iterator7 = _createForOfIteratorHelper(this.iteratePath(path)), _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
          var node = _step7.value.node;
          all.push(node);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return all;
    }
  }, {
    key: "getNode",
    value: function getNode(path) {
      return arrayLast(this.getAllNodes(path));
    }
  }, {
    key: "getNodeIndexAndParent",
    value: function getNodeIndexAndParent(path) {
      var parentPath = path.slice();
      var index3 = parentPath.pop();
      return {
        parent: this.getNode(parentPath),
        index: index3,
        parentPath
      };
    }
  }, {
    key: "getNodeParent",
    value: function getNodeParent(path) {
      return this.getNodeIndexAndParent(path).parent;
    }
  }, {
    key: "setPathNode",
    value: function setPathNode(path, node) {
      if (path == null || path.length === 0) {
        this.data = node;
      } else {
        var childrenKey = this.childrenKey, rootChildren = this.rootChildren;
        var _this$getNodeIndexAnd = this.getNodeIndexAndParent(path), parent = _this$getNodeIndexAnd.parent, index3 = _this$getNodeIndexAnd.index;
        var parentChildren = path.length === 1 ? rootChildren : parent[childrenKey];
        parentChildren[index3] = node;
      }
    }
  }, {
    key: "removeNode",
    value: function removeNode(path) {
      var childrenKey = this.childrenKey, rootChildren = this.rootChildren;
      var _this$getNodeIndexAnd2 = this.getNodeIndexAndParent(path), parent = _this$getNodeIndexAnd2.parent, index3 = _this$getNodeIndexAnd2.index;
      var parentChildren = path.length === 1 ? rootChildren : parent[childrenKey];
      var node = parentChildren[index3];
      parentChildren.splice(index3, 1);
      return node;
    }
  }, {
    key: "walk",
    value: function walk(handler) {
      var opt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var childrenKey = this.childrenKey, data = this.data;
      return walkTreeData(data, handler, childrenKey, opt.reverse);
    }
  }, {
    key: "clone",
    value: function clone() {
      var opt = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var childrenKey = this.childrenKey;
      var td = new TreeData3();
      this.walk(function(node, index3, parent, path) {
        var newNode = Object.assign({}, node);
        if (newNode[childrenKey]) {
          newNode[childrenKey] = [];
        }
        if (opt.afterNodeCreated) {
          opt.afterNodeCreated(newNode, {
            oldNode: node,
            index: index3,
            parent,
            path
          });
        }
        td.setPathNode(path, newNode);
      });
      return td.data;
    }
  }, {
    key: "rootChildren",
    get: function get() {
      var childrenKey = this.childrenKey;
      if (!this.data) {
        this.data = [];
      }
      var data = this.data;
      return isArray(data) ? data : data[childrenKey];
    }
  }]);
  return TreeData3;
}();
function getScroll() {
  if (typeof pageYOffset != "undefined") {
    return {
      top: pageYOffset,
      left: pageXOffset
    };
  } else {
    var B = document.body;
    var D = document.documentElement;
    D = D.clientHeight ? D : B;
    return {
      top: D.scrollTop,
      left: D.scrollLeft
    };
  }
}
function getOffset(el) {
  var rect = getBoundingClientRect(el);
  var scroll = getScroll();
  return {
    x: rect.left + scroll.left,
    y: rect.top + scroll.top
  };
}
function getOffsetParent(el) {
  var offsetParent = el.offsetParent;
  if (!offsetParent || offsetParent === document.body && getComputedStyle(document.body).position === "static") {
    offsetParent = document.body.parentElement;
  }
  return offsetParent;
}
function getPosition(el) {
  var offsetParent = getOffsetParent(el);
  var ps = {
    x: el.offsetLeft,
    y: el.offsetTop
  };
  var parent = el;
  while (true) {
    parent = parent.parentElement;
    if (parent === offsetParent || !parent) {
      break;
    }
    ps.x -= parent.scrollLeft;
    ps.y -= parent.scrollTop;
  }
  return ps;
}
function getBoundingClientRect(el) {
  var xy = el.getBoundingClientRect();
  var top = xy.top - document.documentElement.clientTop, bottom = xy.bottom, left = xy.left - document.documentElement.clientLeft, right = xy.right, width = xy.width || right - left, height = xy.height || bottom - top;
  var x = left;
  var y = top;
  return {
    top,
    right,
    bottom,
    left,
    width,
    height,
    x,
    y
  };
}
function backupAttr(el, name) {
  var key = "original_".concat(name);
  el[key] = el.getAttribute(name);
}
function restoreAttr(el, name) {
  var key = "original_".concat(name);
  el.setAttribute(name, el[key]);
}
function hasClass(el, className) {
  if (el.classList) {
    return el.classList.contains(className);
  } else {
    return new RegExp("(^| )" + className + "( |$)", "gi").test(el.className);
  }
}
function addClass(el, className) {
  if (!hasClass(el, className)) {
    if (el.classList) {
      el.classList.add(className);
    } else {
      el.className += " " + className;
    }
  }
}
function getElSize(el) {
  backupAttr(el, "style");
  el.style.display = "block";
  var t = getBoundingClientRect(el);
  var size = {
    width: t.width,
    height: t.height
  };
  restoreAttr(el, "style");
  return size;
}
function onDOM(el, name, handler) {
  for (var _len6 = arguments.length, args2 = new Array(_len6 > 3 ? _len6 - 3 : 0), _key8 = 3; _key8 < _len6; _key8++) {
    args2[_key8 - 3] = arguments[_key8];
  }
  if (el.addEventListener) {
    el.addEventListener.apply(el, [name, handler].concat(args2));
  } else if (el.attachEvent) {
    el.attachEvent.apply(el, ["on".concat(name), handler].concat(args2));
  }
}
function offDOM(el, name, handler) {
  for (var _len7 = arguments.length, args2 = new Array(_len7 > 3 ? _len7 - 3 : 0), _key9 = 3; _key9 < _len7; _key9++) {
    args2[_key9 - 3] = arguments[_key9];
  }
  if (el.removeEventListener) {
    el.removeEventListener.apply(el, [name, handler].concat(args2));
  } else if (el.detachEvent) {
    el.detachEvent.apply(el, ["on".concat(name), handler].concat(args2));
  }
}
function binarySearch(arr, callback, start, end, returnNearestIfNoHit) {
  var max = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 1e3;
  var midNum;
  var mid;
  if (start == null) {
    start = 0;
    end = arr.length - 1;
  }
  var i = 0;
  var r;
  while (start >= 0 && start <= end) {
    if (i >= max) {
      throw Error("binarySearch: loop times is over ".concat(max, ", you can increase the limit."));
    }
    midNum = Math.floor((end - start) / 2 + start);
    mid = arr[midNum];
    r = callback(mid, i);
    if (r > 0) {
      end = midNum - 1;
    } else if (r < 0) {
      start = midNum + 1;
    } else {
      return {
        index: midNum,
        value: mid,
        count: i + 1,
        hit: true
      };
    }
    i++;
  }
  return returnNearestIfNoHit ? {
    index: midNum,
    value: mid,
    count: i + 1,
    hit: false,
    bigger: r > 0
  } : null;
}
function waitTime(milliseconds, callback) {
  return new Promise(function(resolve, reject) {
    setTimeout(function() {
      callback && callback();
      resolve();
    }, milliseconds);
  });
}
var URLHelper = function() {
  function URLHelper3(baseUrl) {
    var _this3 = this;
    _classCallCheck(this, URLHelper3);
    this.baseUrl = "";
    this.search = {};
    var t = decodeURI(baseUrl).split("?");
    this.baseUrl = t[0];
    if (t[1]) {
      t[1].split("&").forEach(function(v) {
        var t2 = v.split("=");
        _this3.search[t2[0]] = t2[1] == null ? "" : decodeURIComponent(t2[1]);
      });
    }
  }
  _createClass(URLHelper3, [{
    key: "getHref",
    value: function getHref() {
      var _this4 = this;
      var t = [this.baseUrl];
      var searchStr = Object.keys(this.search).map(function(k) {
        return "".concat(k, "=").concat(encodeURIComponent(_this4.search[k]));
      }).join("&");
      if (searchStr) {
        t.push(searchStr);
      }
      return t.join("?");
    }
  }]);
  return URLHelper3;
}();
var EventProcessor = function() {
  function EventProcessor3() {
    _classCallCheck(this, EventProcessor3);
    this.eventStore = [];
  }
  _createClass(EventProcessor3, [{
    key: "on",
    value: function on2(name, handler) {
      this.eventStore.push({
        name,
        handler
      });
    }
  }, {
    key: "once",
    value: function once(name, handler) {
      var _this5 = this;
      var off2 = function off3() {
        _this5.off(name, wrappedHandler);
      };
      var wrappedHandler = function wrappedHandler2() {
        handler.apply(void 0, arguments);
        off2();
      };
      this.on(name, wrappedHandler);
      return off2;
    }
  }, {
    key: "onceTimeout",
    value: function onceTimeout(name, handler, timeout) {
      var _this6 = this;
      var off2;
      var promise = new Promise(function(resolve, reject) {
        var wrappedHandler = function wrappedHandler2() {
          handler.apply(void 0, arguments);
          resolve();
        };
        off2 = _this6.once(name, wrappedHandler);
        waitTime(timeout).then(function() {
          off2();
          reject();
        });
      });
      var off22 = function off23() {
        off2 && off2();
      };
      return {
        off: off22,
        promise
      };
    }
  }, {
    key: "off",
    value: function off2(name, handler) {
      var indexes = [];
      var len = this.eventStore.length;
      for (var i = 0; i < len; i++) {
        var item = this.eventStore[i];
        if (item.name === name && item.handler === handler) {
          indexes.unshift(i);
        }
      }
      for (var _i13 = 0, _indexes = indexes; _i13 < _indexes.length; _i13++) {
        var index3 = _indexes[_i13];
        this.eventStore.splice(index3, 1);
      }
    }
  }, {
    key: "emit",
    value: function emit(name) {
      var items = [];
      var _iterator15 = _createForOfIteratorHelper(this.eventStore), _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
          var _item = _step15.value;
          if (_item.name === name) {
            items.push(_item);
          }
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
      for (var _len10 = arguments.length, args2 = new Array(_len10 > 1 ? _len10 - 1 : 0), _key12 = 1; _key12 < _len10; _key12++) {
        args2[_key12 - 1] = arguments[_key12];
      }
      for (var _i14 = 0, _items = items; _i14 < _items.length; _i14++) {
        var item = _items[_i14];
        item.handler.apply(item, args2);
      }
    }
  }]);
  return EventProcessor3;
}();
var CrossWindowEventProcessor = function(_EventProcessor) {
  _inherits(CrossWindowEventProcessor3, _EventProcessor);
  var _super = _createSuper(CrossWindowEventProcessor3);
  function CrossWindowEventProcessor3(opt) {
    var _this7;
    _classCallCheck(this, CrossWindowEventProcessor3);
    _this7 = _super.call(this);
    _this7.storageName = "_crossWindow";
    _this7.windows = [];
    _this7.timeout = 200;
    _this7.BROADCAST = "__BROADCAST__";
    if (opt) {
      Object.assign(_assertThisInitialized(_this7), opt);
    }
    onDOM(window, "storage", function(ev) {
      if (ev.key === _this7.storageName) {
        var event = JSON.parse(ev.newValue);
        if (!event.targets || event.targets.includes(_this7.id)) {
          var _this8;
          (_this8 = _this7).emitLocal.apply(_this8, [event.name].concat(_toConsumableArray(event.args)));
        }
      }
    });
    _this7.id = strRand();
    _this7.windows = [_this7.id];
    _this7.ready = new Promise(function(resolve, reject) {
      _this7.onceTimeout("_windows_updated", function(_ref) {
        var windows = _ref.windows;
        _this7.windows = windows;
      }, _this7.timeout).promise.then(function() {
        resolve();
      }, function() {
        resolve();
      });
      _this7.broadcast("_join", _this7.id);
    });
    _this7.ready.then(function() {
      _this7.on("_join", function(id) {
        _this7.windows.push(id);
        if (_this7.isMain()) {
          _this7.broadcast("_windows_updated", {
            windows: _this7.windows,
            type: "join",
            id
          });
        }
      });
      _this7.on("_windows_updated", function(_ref2) {
        var windows = _ref2.windows;
        _this7.windows = windows;
      });
      _this7.on("_exit", function(id) {
        var oldMain = _this7.windows[0];
        arrayRemove(_this7.windows, id);
        if (_this7.isMain()) {
          _this7.emit("_windows_updated", {
            windows: _this7.windows,
            type: "exit",
            id
          });
          if (oldMain != _this7.id) {
            _this7.emit("_main_updated", {
              windows: _this7.windows,
              old: oldMain,
              "new": _this7.id
            });
          }
        }
      });
      onDOM(window, "beforeunload", function() {
        _this7.exitGroup();
      });
    });
    return _this7;
  }
  _createClass(CrossWindowEventProcessor3, [{
    key: "isMain",
    value: function isMain() {
      return this.id === this.windows[0];
    }
  }, {
    key: "emitTo",
    value: function emitTo(name, targets2) {
      for (var _len11 = arguments.length, args2 = new Array(_len11 > 2 ? _len11 - 2 : 0), _key13 = 2; _key13 < _len11; _key13++) {
        args2[_key13 - 2] = arguments[_key13];
      }
      if (targets2 === this.BROADCAST) {
        targets2 = null;
      } else {
        if (targets2 && !isArray(targets2)) {
          targets2 = [targets2];
        }
        if (targets2.includes(this.id)) {
          var _get2;
          (_get2 = _get(_getPrototypeOf(CrossWindowEventProcessor3.prototype), "emit", this)).call.apply(_get2, [this, name].concat(args2));
        }
      }
      glb().localStorage.setItem(this.storageName, JSON.stringify({
        name,
        targets: targets2,
        args: args2,
        // use random make storage event triggered every time
        // 加入随机保证触发storage事件
        random: Math.random()
      }));
    }
  }, {
    key: "emitLocal",
    value: function emitLocal(name) {
      for (var _len12 = arguments.length, args2 = new Array(_len12 > 1 ? _len12 - 1 : 0), _key14 = 1; _key14 < _len12; _key14++) {
        args2[_key14 - 1] = arguments[_key14];
      }
      this.emitTo.apply(this, [name, this.id].concat(args2));
    }
  }, {
    key: "broadcast",
    value: function broadcast(name) {
      for (var _len13 = arguments.length, args2 = new Array(_len13 > 1 ? _len13 - 1 : 0), _key15 = 1; _key15 < _len13; _key15++) {
        args2[_key15 - 1] = arguments[_key15];
      }
      this.emitTo.apply(this, [name, this.BROADCAST].concat(args2));
    }
  }, {
    key: "emit",
    value: function emit(name) {
      for (var _len14 = arguments.length, args2 = new Array(_len14 > 1 ? _len14 - 1 : 0), _key16 = 1; _key16 < _len14; _key16++) {
        args2[_key16 - 1] = arguments[_key16];
      }
      this.emitTo.apply(this, [name, this.windows].concat(args2));
    }
  }, {
    key: "exitGroup",
    value: function exitGroup() {
      this.broadcast("_exit", this.id);
    }
  }]);
  return CrossWindowEventProcessor3;
}(EventProcessor);
var Cache = function() {
  function Cache4() {
    _classCallCheck(this, Cache4);
    this.store = {};
  }
  _createClass(Cache4, [{
    key: "has",
    value: function has(name) {
      return this.store.hasOwnProperty(name);
    }
  }, {
    key: "remember",
    value: function remember(name, getter) {
      if (!this.has(name)) {
        this.store[name] = {
          value: getter()
        };
      }
      return this.store[name].value;
    }
  }, {
    key: "forget",
    value: function forget(name) {
      if (name) {
        if (this.has(name)) {
          delete this.store[name];
        }
      } else {
        this.store = {};
      }
    }
  }]);
  return Cache4;
}();

// node_modules/tree-helper/dist/tree-helper.esm.js
function _typeof2(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof2 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof2 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof2(obj);
}
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _nonIterableSpread2();
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  }
}
function _iterableToArray2(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
    return Array.from(iter);
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function breadthFirstSearch(obj, handler) {
  var reverse = arguments.length > 3 ? arguments[3] : void 0;
  var rootChildren = isArray(obj) ? obj : [obj];
  var stack = rootChildren.map(function(v, i) {
    return {
      item: v,
      index: i
    };
  });
  if (reverse) {
    stack.reverse();
  }
  var _loop3 = function _loop4() {
    var _stack$shift = stack.shift(), item = _stack$shift.item, index3 = _stack$shift.index, parent = _stack$shift.parent;
    var r = handler(item, index3, parent);
    if (r === false) {
      return {
        v: void 0
      };
    } else if (r === "skip children") {
      return "continue";
    } else if (r === "skip siblings") {
      stack = stack.filter(function(v) {
        return v.parent !== parent;
      });
    }
    if (item.children) {
      var _stack;
      var children = item.children;
      if (reverse) {
        children = children.slice();
        children.reverse();
      }
      var pushStack = children.map(function(v, i) {
        return {
          item: v,
          index: i,
          parent: item
        };
      });
      (_stack = stack).push.apply(_stack, _toConsumableArray2(pushStack));
    }
  };
  while (stack.length) {
    var _ret = _loop3();
    switch (_ret) {
      case "continue":
        continue;
      default:
        if (_typeof2(_ret) === "object")
          return _ret.v;
    }
  }
}
function _changeParent(item, parent) {
  var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  var parentKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "parent";
  if (item[parentKey]) {
    arrayRemove(item[parentKey][childrenKey], item);
  }
  item[parentKey] = parent;
}
function insertBefore(item, target) {
  var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  var parentKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "parent";
  if (item === target) {
    return;
  }
  var siblings = target[parentKey][childrenKey];
  var index3 = siblings.indexOf(target);
  if (siblings[index3 - 1] !== item) {
    if (item[parentKey] === target[parentKey]) {
      arrayRemove(siblings, item);
      index3 = siblings.indexOf(target);
    } else {
      _changeParent(item, target[parentKey]);
    }
    siblings.splice(index3, 0, item);
  }
}
function insertAfter(item, target) {
  var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  var parentKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "parent";
  if (item === target) {
    return;
  }
  var targetParent = target[parentKey];
  var siblings = targetParent[childrenKey];
  var index3 = siblings.indexOf(target);
  if (siblings[index3 + 1] !== item) {
    if (item[parentKey] === target[parentKey]) {
      arrayRemove(siblings, item);
      index3 = siblings.indexOf(target);
    } else {
      _changeParent(item, target[parentKey]);
    }
    siblings.splice(index3 + 1, 0, item);
  }
}
function prependTo(item, target) {
  var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  if (item === target) {
    throw "can't prepend to self";
  }
  var targetChildren = target[childrenKey];
  if (targetChildren[0] !== item) {
    _changeParent(item, target);
    targetChildren.splice(0, 0, item);
  }
}
function appendTo(item, target) {
  var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  if (item === target) {
    throw "can't append to self";
  }
  var targetChildren = target[childrenKey];
  var targetChildrenLast = targetChildren[targetChildren.length - 1];
  if (targetChildrenLast !== item) {
    _changeParent(item, target);
    targetChildren.push(item);
  }
}

// node_modules/vue-runtime-helpers/dist/normalize-component.mjs
function normalizeComponent(template, style, script2, scopeId, isFunctionalTemplate, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== "boolean") {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  }
  const options = typeof script2 === "function" ? script2.options : script2;
  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true;
    if (isFunctionalTemplate) {
      options.functional = true;
    }
  }
  if (scopeId) {
    options._scopeId = scopeId;
  }
  let hook;
  if (moduleIdentifier) {
    hook = function(context) {
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (style) {
        style.call(this, createInjectorSSR(context));
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function(context) {
      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function(context) {
      style.call(this, createInjector(context));
    };
  }
  if (hook) {
    if (options.functional) {
      const originalRender = options.render;
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      const existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }
  return script2;
}
var normalize_component_default = normalizeComponent;

// node_modules/drag-event-service/dist/drag-event-service.es.js
var events = {
  start: ["mousedown", "touchstart"],
  move: ["mousemove", "touchmove"],
  end: ["mouseup", "touchend"]
};
var index = {
  isTouch: function isTouch(e) {
    return e.type && e.type.startsWith("touch");
  },
  _getStore: function _getStore(el) {
    if (!el._wrapperStore) {
      el._wrapperStore = [];
    }
    return el._wrapperStore;
  },
  on: function on(el, name, handler) {
    var _hp$onDOM, _hp$onDOM2;
    var store3 = this._getStore(el);
    var ts = this;
    var wrapper = function wrapper2(e) {
      var mouse;
      var isTouch2 = ts.isTouch(e);
      if (isTouch2) {
        mouse = {
          x: e.changedTouches[0].pageX,
          y: e.changedTouches[0].pageY
        };
      } else {
        mouse = {
          x: e.pageX,
          y: e.pageY
        };
        if (name === "start" && e.which !== 1) {
          return;
        }
      }
      return handler.call(this, e, mouse);
    };
    store3.push({
      handler,
      wrapper
    });
    for (var _len = arguments.length, args2 = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args2[_key - 3] = arguments[_key];
    }
    (_hp$onDOM = onDOM).call.apply(_hp$onDOM, [null, el, events[name][0], wrapper].concat(args2));
    (_hp$onDOM2 = onDOM).call.apply(_hp$onDOM2, [null, el, events[name][1], wrapper].concat(args2));
  },
  off: function off(el, name, handler) {
    var store3 = this._getStore(el);
    for (var _len2 = arguments.length, args2 = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      args2[_key2 - 3] = arguments[_key2];
    }
    for (var i = store3.length - 1; i >= 0; i--) {
      var _store$i = store3[i], handler2 = _store$i.handler, wrapper = _store$i.wrapper;
      if (handler === handler2) {
        var _hp$offDOM, _hp$offDOM2;
        (_hp$offDOM = offDOM).call.apply(_hp$offDOM, [null, el, events[name][0], wrapper].concat(args2));
        (_hp$offDOM2 = offDOM).call.apply(_hp$offDOM2, [null, el, events[name][1], wrapper].concat(args2));
        store3.splice(i, 1);
      }
    }
  }
};
var drag_event_service_es_default = index;

// node_modules/draggable-helper/dist/draggable-helper.es.js
function index2(dragHandlerEl) {
  var opt = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (opt.minTranslate == null) {
    opt.minTranslate = 10;
  }
  var store3 = getPureStore();
  var destroy = function destroy2() {
    drag_event_service_es_default.off(dragHandlerEl, "end", dragHandlerEl._draggbleEventHandler);
    offDOM(dragHandlerEl, "selectstart", preventSelect);
    delete dragHandlerEl._draggbleEventHandler;
  };
  if (dragHandlerEl._draggbleEventHandler) {
    destroy();
  }
  dragHandlerEl._draggbleEventHandler = start;
  drag_event_service_es_default.on(dragHandlerEl, "start", dragHandlerEl._draggbleEventHandler);
  onDOM(dragHandlerEl, "selectstart", preventSelect);
  return destroy;
  function start(e, mouse) {
    store3.mouse = {
      x: mouse.x,
      y: mouse.y
    };
    store3.initialMouse = Object.assign({}, store3.mouse);
    drag_event_service_es_default.on(document, "move", moving, {
      passive: false
    });
    drag_event_service_es_default.on(window, "end", drop);
  }
  function drag(e) {
    var _resolveDragedElAndIn = resolveDragedElAndInitialPosition(), el = _resolveDragedElAndIn.el, position = _resolveDragedElAndIn.position;
    store3.el = el;
    store3.initialPosition = Object.assign({}, position);
    var r = opt.drag && opt.drag(e, opt, store3);
    if (r === false) {
      return false;
    }
    var size = getElSize(el);
    var style = Object.assign({
      width: "".concat(size.width, "px"),
      height: "".concat(size.height, "px"),
      zIndex: 9999,
      opacity: 0.6,
      position: "absolute",
      left: position.x + "px",
      top: position.y + "px"
    }, opt.style || opt.getStyle && opt.getStyle(opt) || {});
    backupAttr(el, "style");
    for (var key in style) {
      el.style[key] = style[key];
    }
    backupAttr(el, "class");
    addClass(el, opt.draggingClass);
  }
  function moving(e, mouse) {
    store3.mouse = {
      x: mouse.x,
      y: mouse.y
    };
    var move = store3.move = {
      x: store3.mouse.x - store3.initialMouse.x,
      y: store3.mouse.y - store3.initialMouse.y
    };
    if (store3.movedCount === 0 && opt.minTranslate) {
      var x2 = Math.pow(store3.move.x, 2);
      var y2 = Math.pow(store3.move.y, 2);
      var dtc = Math.pow(x2 + y2, 0.5);
      if (dtc < opt.minTranslate) {
        return;
      }
    }
    var canMove = true;
    if (store3.movedCount === 0) {
      if (drag(e) === false) {
        canMove = false;
      }
    }
    e.preventDefault();
    if (canMove && opt.moving) {
      if (opt.moving(e, opt, store3) === false) {
        canMove = false;
      }
    }
    if (canMove) {
      if (!store3 || !store3.el) {
        return;
      }
      Object.assign(store3.el.style, {
        left: store3.initialPosition.x + move.x + "px",
        top: store3.initialPosition.y + move.y + "px"
      });
      store3.movedCount++;
    }
  }
  function drop(e) {
    drag_event_service_es_default.off(document, "move", moving, {
      passive: false
    });
    drag_event_service_es_default.off(window, "end", drop);
    if (store3.movedCount > 0) {
      store3.movedCount = 0;
      var _store = store3, el = _store.el;
      if (opt.clone) {
        el.parentElement.removeChild(el);
      } else {
        restoreAttr(el, "style");
        restoreAttr(el, "class");
      }
      opt.drop && opt.drop(e, opt, store3);
    }
    store3 = getPureStore();
  }
  function resolveDragedElAndInitialPosition() {
    var el0 = opt.getEl ? opt.getEl(dragHandlerEl, opt) : dragHandlerEl;
    var el = el0;
    if (opt.clone) {
      store3.triggerEl = el0;
      el = el0.cloneNode(true);
      el0.parentElement.appendChild(el);
    }
    return {
      position: getPosition(el),
      el
    };
  }
  function getPureStore() {
    return {
      movedCount: 0
    };
  }
  function preventSelect(e) {
    e.preventDefault();
  }
}
var draggable_helper_es_default = index2;

// node_modules/vue-functions/dist/vue-functions.esm.js
var import_regenerator3 = __toESM(require_regenerator());

// node_modules/vue-functions/node_modules/helper-js/dist/helper-js.esm.js
var import_regenerator2 = __toESM(require_regenerator());
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var _marked2 = import_regenerator2.default.mark(iterateAll2);
function _createForOfIteratorHelper2(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray3(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
var store2 = {
  uniqueId: {}
};
function glb2() {
  if (store2.glb) {
    return store2.glb;
  } else {
    var t;
    try {
      t = global;
    } catch (e) {
      t = window;
    }
    store2.glb = t;
    return t;
  }
}
function isArray2(v) {
  return Object.prototype.toString.call(v) === "[object Array]";
}
function isObject2(v) {
  return Object.prototype.toString.call(v) === "[object Object]";
}
function randInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1) + min);
}
function randChoice(arr) {
  return arr[randInt(0, arr.length - 1)];
}
function randString() {
  var len = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 8;
  var seeds = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var r = "";
  for (var i = 0; i < len; i++) {
    r += randChoice(seeds);
  }
  return r;
}
function arrayRemove2(arr, v) {
  var index3;
  var count = 0;
  while ((index3 = arr.indexOf(v)) > -1) {
    arr.splice(index3, 1);
    count++;
  }
  return count;
}
function arrayLast2(arr) {
  return arr[arr.length - 1];
}
function iterateAll2(val) {
  var opt, i, info, _i2, _Object$keys, key, _info, _i3, _info2, keys, _i4, _keys, _key, _info3, _args = arguments;
  return import_regenerator2.default.wrap(function iterateAll$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          opt = _args.length > 1 && _args[1] !== void 0 ? _args[1] : {};
          if (opt.reverse) {
            _context.next = 30;
            break;
          }
          if (!(val.length != null)) {
            _context.next = 14;
            break;
          }
          i = 0;
        case 4:
          if (!(i < val.length)) {
            _context.next = 12;
            break;
          }
          info = {
            value: val[i],
            index: i
          };
          if (!(!opt.exclude || !opt.exclude(info))) {
            _context.next = 9;
            break;
          }
          _context.next = 9;
          return info;
        case 9:
          i++;
          _context.next = 4;
          break;
        case 12:
          _context.next = 28;
          break;
        case 14:
          if (!isObject2(val)) {
            _context.next = 27;
            break;
          }
          _i2 = 0, _Object$keys = Object.keys(val);
        case 16:
          if (!(_i2 < _Object$keys.length)) {
            _context.next = 25;
            break;
          }
          key = _Object$keys[_i2];
          _info = {
            value: val[key],
            key
          };
          if (!(!opt.exclude || !opt.exclude(_info))) {
            _context.next = 22;
            break;
          }
          _context.next = 22;
          return _info;
        case 22:
          _i2++;
          _context.next = 16;
          break;
        case 25:
          _context.next = 28;
          break;
        case 27:
          throw "Unsupported type";
        case 28:
          _context.next = 58;
          break;
        case 30:
          if (!(val.length != null)) {
            _context.next = 42;
            break;
          }
          _i3 = val.length - 1;
        case 32:
          if (!(_i3 >= 0)) {
            _context.next = 40;
            break;
          }
          _info2 = {
            value: val[_i3],
            index: _i3
          };
          if (!(!opt.exclude || !opt.exclude(_info2))) {
            _context.next = 37;
            break;
          }
          _context.next = 37;
          return _info2;
        case 37:
          _i3--;
          _context.next = 32;
          break;
        case 40:
          _context.next = 58;
          break;
        case 42:
          if (!isObject2(val)) {
            _context.next = 57;
            break;
          }
          keys = Object.keys(val);
          keys.reverse();
          _i4 = 0, _keys = keys;
        case 46:
          if (!(_i4 < _keys.length)) {
            _context.next = 55;
            break;
          }
          _key = _keys[_i4];
          _info3 = {
            value: val[_key],
            key: _key
          };
          if (!(!opt.exclude || !opt.exclude(_info3))) {
            _context.next = 52;
            break;
          }
          _context.next = 52;
          return _info3;
        case 52:
          _i4++;
          _context.next = 46;
          break;
        case 55:
          _context.next = 58;
          break;
        case 57:
          throw "Unsupported type";
        case 58:
        case "end":
          return _context.stop();
      }
    }
  }, _marked2);
}
function depthFirstSearch2(obj, handler) {
  var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
  var opt = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var rootChildren = isArray2(obj) ? obj : [obj];
  var StopException = _createClass(function StopException2() {
    _classCallCheck(this, StopException2);
  });
  var func = function func2(children, parent, parentPath) {
    if (opt.reverse) {
      children = children.slice();
      children.reverse();
    }
    var len = children.length;
    for (var i = 0; i < len; i++) {
      var item = children[i];
      var index3 = opt.reverse ? len - i - 1 : i;
      var path = parentPath ? [].concat(_toConsumableArray(parentPath), [index3]) : [];
      var r = handler(item, index3, parent, path);
      if (r === false) {
        throw new StopException();
      } else if (r === "skip children") {
        continue;
      } else if (r === "skip siblings") {
        break;
      }
      if (item[childrenKey] != null) {
        func2(item[childrenKey], item, path);
      }
    }
  };
  try {
    func(rootChildren, null, isArray2(obj) ? [] : null);
  } catch (e) {
    if (e instanceof StopException)
      ;
    else {
      throw e;
    }
  }
}
var walkTreeData2 = depthFirstSearch2;
var TreeData2 = function() {
  function TreeData3() {
    var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    _classCallCheck(this, TreeData3);
    this.childrenKey = "children";
    this.data = data;
  }
  _createClass(TreeData3, [{
    key: "rootChildren",
    get: function get() {
      var childrenKey = this.childrenKey;
      var data = this.data;
      return isArray2(data) ? data : data[childrenKey];
    }
  }, {
    key: "iteratePath",
    value: import_regenerator2.default.mark(function iteratePath(path) {
      var opt, childrenKey, rootChildren, prevPath, prevChildren, _iterator4, _step4, index3, currentPath, currentNode, list, _iterator5, _step5, _step5$value, path0, node, _path, _args2 = arguments;
      return import_regenerator2.default.wrap(function iteratePath$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              opt = _args2.length > 1 && _args2[1] !== void 0 ? _args2[1] : {};
              childrenKey = this.childrenKey, rootChildren = this.rootChildren;
              if (opt.reverse) {
                _context2.next = 29;
                break;
              }
              prevPath = [];
              prevChildren = rootChildren;
              _iterator4 = _createForOfIteratorHelper2(path);
              _context2.prev = 6;
              _iterator4.s();
            case 8:
              if ((_step4 = _iterator4.n()).done) {
                _context2.next = 19;
                break;
              }
              index3 = _step4.value;
              currentPath = [].concat(_toConsumableArray(prevPath), [index3]);
              currentNode = prevChildren[index3];
              _context2.next = 14;
              return {
                path: currentPath,
                node: currentNode
              };
            case 14:
              prevPath = currentPath;
              prevChildren = currentNode[childrenKey];
            case 17:
              _context2.next = 8;
              break;
            case 19:
              _context2.next = 24;
              break;
            case 21:
              _context2.prev = 21;
              _context2.t0 = _context2["catch"](6);
              _iterator4.e(_context2.t0);
            case 24:
              _context2.prev = 24;
              _iterator4.f();
              return _context2.finish(24);
            case 27:
              _context2.next = 49;
              break;
            case 29:
              list = _toConsumableArray(this.iteratePath(path, Object.assign(Object.assign({}, opt), {
                reverse: false
              })));
              list.reverse();
              _iterator5 = _createForOfIteratorHelper2(list);
              _context2.prev = 32;
              _iterator5.s();
            case 34:
              if ((_step5 = _iterator5.n()).done) {
                _context2.next = 41;
                break;
              }
              _step5$value = _step5.value, path0 = _step5$value.path, node = _step5$value.node;
              _path = path0;
              _context2.next = 39;
              return {
                path: _path,
                node
              };
            case 39:
              _context2.next = 34;
              break;
            case 41:
              _context2.next = 46;
              break;
            case 43:
              _context2.prev = 43;
              _context2.t1 = _context2["catch"](32);
              _iterator5.e(_context2.t1);
            case 46:
              _context2.prev = 46;
              _iterator5.f();
              return _context2.finish(46);
            case 49:
            case "end":
              return _context2.stop();
          }
        }
      }, iteratePath, this, [[6, 21, 24, 27], [32, 43, 46, 49]]);
    })
  }, {
    key: "getAllNodes",
    value: function getAllNodes(path) {
      var all = [];
      var _iterator6 = _createForOfIteratorHelper2(this.iteratePath(path)), _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done; ) {
          var node = _step6.value.node;
          all.push(node);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return all;
    }
  }, {
    key: "getNode",
    value: function getNode(path) {
      return arrayLast2(this.getAllNodes(path));
    }
  }, {
    key: "getNodeIndexAndParent",
    value: function getNodeIndexAndParent(path) {
      var parentPath = path.slice();
      var index3 = parentPath.pop();
      return {
        parent: this.getNode(parentPath),
        index: index3,
        parentPath
      };
    }
  }, {
    key: "getNodeParent",
    value: function getNodeParent(path) {
      return this.getNodeIndexAndParent(path).parent;
    }
  }, {
    key: "setPathNode",
    value: function setPathNode(path, node) {
      if (path == null || path.length === 0) {
        this.data = node;
      } else {
        var childrenKey = this.childrenKey, rootChildren = this.rootChildren;
        var _this$getNodeIndexAnd = this.getNodeIndexAndParent(path), parent = _this$getNodeIndexAnd.parent, index3 = _this$getNodeIndexAnd.index;
        var parentChildren = path.length === 1 ? rootChildren : parent[childrenKey];
        parentChildren[index3] = node;
      }
    }
  }, {
    key: "removeNode",
    value: function removeNode(path) {
      var childrenKey = this.childrenKey, rootChildren = this.rootChildren;
      var _this$getNodeIndexAnd2 = this.getNodeIndexAndParent(path), parent = _this$getNodeIndexAnd2.parent, index3 = _this$getNodeIndexAnd2.index;
      var parentChildren = path.length === 1 ? rootChildren : parent[childrenKey];
      var node = parentChildren[index3];
      parentChildren.splice(index3, 1);
      return node;
    }
  }, {
    key: "walk",
    value: function walk(handler, opt) {
      var childrenKey = this.childrenKey, data = this.data;
      return walkTreeData2(data, handler, childrenKey, opt);
    }
  }, {
    key: "clone",
    value: function clone() {
      var opt = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var childrenKey = this.childrenKey;
      var td = new TreeData3();
      td.childrenKey = childrenKey;
      this.walk(function(node, index3, parent, path) {
        var newNode = Object.assign({}, node);
        if (newNode[childrenKey]) {
          newNode[childrenKey] = [];
        }
        if (opt.afterNodeCreated) {
          opt.afterNodeCreated(newNode, {
            oldNode: node,
            index: index3,
            parent,
            path
          });
        }
        td.setPathNode(path, newNode);
      });
      return td.data;
    }
  }]);
  return TreeData3;
}();
function onDOM2(el, name, handler) {
  for (var _len5 = arguments.length, args2 = new Array(_len5 > 3 ? _len5 - 3 : 0), _key6 = 3; _key6 < _len5; _key6++) {
    args2[_key6 - 3] = arguments[_key6];
  }
  if (el.addEventListener) {
    el.addEventListener.apply(el, [name, handler].concat(args2));
  } else if (el.attachEvent) {
    el.attachEvent.apply(el, ["on".concat(name), handler].concat(args2));
  }
}
function waitTime2(milliseconds, callback) {
  return new Promise(function(resolve, reject) {
    setTimeout(function() {
      callback && callback();
      resolve();
    }, milliseconds);
  });
}
var URLHelper2 = function() {
  function URLHelper3(baseUrl) {
    var _this3 = this;
    _classCallCheck(this, URLHelper3);
    this.baseUrl = "";
    this.search = {};
    var t = decodeURI(baseUrl).split("?");
    this.baseUrl = t[0];
    if (t[1]) {
      t[1].split("&").forEach(function(v) {
        var t2 = v.split("=");
        _this3.search[t2[0]] = t2[1] == null ? "" : decodeURIComponent(t2[1]);
      });
    }
  }
  _createClass(URLHelper3, [{
    key: "getHref",
    value: function getHref() {
      var _this4 = this;
      var t = [this.baseUrl];
      var searchStr = Object.keys(this.search).map(function(k) {
        return "".concat(k, "=").concat(encodeURIComponent(_this4.search[k]));
      }).join("&");
      if (searchStr) {
        t.push(searchStr);
      }
      return t.join("?");
    }
  }]);
  return URLHelper3;
}();
var EventProcessor2 = function() {
  function EventProcessor3() {
    _classCallCheck(this, EventProcessor3);
    this.eventStore = [];
  }
  _createClass(EventProcessor3, [{
    key: "on",
    value: function on2(name, handler) {
      this.eventStore.push({
        name,
        handler
      });
    }
  }, {
    key: "once",
    value: function once(name, handler) {
      var _this5 = this;
      var off2 = function off3() {
        _this5.off(name, wrappedHandler);
      };
      var wrappedHandler = function wrappedHandler2() {
        handler.apply(void 0, arguments);
        off2();
      };
      this.on(name, wrappedHandler);
      return off2;
    }
  }, {
    key: "onceTimeout",
    value: function onceTimeout(name, handler, timeout) {
      var _this6 = this;
      var off2;
      var promise = new Promise(function(resolve, reject) {
        var wrappedHandler = function wrappedHandler2() {
          handler.apply(void 0, arguments);
          resolve();
        };
        off2 = _this6.once(name, wrappedHandler);
        waitTime2(timeout).then(function() {
          off2();
          reject();
        });
      });
      var off22 = function off23() {
        off2 && off2();
      };
      return {
        off: off22,
        promise
      };
    }
  }, {
    key: "off",
    value: function off2(name, handler) {
      var indexes = [];
      var len = this.eventStore.length;
      for (var i = 0; i < len; i++) {
        var item = this.eventStore[i];
        if (item.name === name && item.handler === handler) {
          indexes.unshift(i);
        }
      }
      for (var _i7 = 0, _indexes = indexes; _i7 < _indexes.length; _i7++) {
        var index3 = _indexes[_i7];
        this.eventStore.splice(index3, 1);
      }
    }
  }, {
    key: "emit",
    value: function emit(name) {
      var items = [];
      var _iterator14 = _createForOfIteratorHelper2(this.eventStore), _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
          var _item = _step14.value;
          if (_item.name === name) {
            items.push(_item);
          }
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
      for (var _len8 = arguments.length, args2 = new Array(_len8 > 1 ? _len8 - 1 : 0), _key9 = 1; _key9 < _len8; _key9++) {
        args2[_key9 - 1] = arguments[_key9];
      }
      for (var _i8 = 0, _items = items; _i8 < _items.length; _i8++) {
        var item = _items[_i8];
        item.handler.apply(item, args2);
      }
    }
  }]);
  return EventProcessor3;
}();
var CrossWindowEventProcessor2 = function(_EventProcessor) {
  _inherits(CrossWindowEventProcessor3, _EventProcessor);
  var _super = _createSuper2(CrossWindowEventProcessor3);
  function CrossWindowEventProcessor3(opt) {
    var _this7;
    _classCallCheck(this, CrossWindowEventProcessor3);
    _this7 = _super.call(this);
    _this7.storageName = "_crossWindow";
    _this7.windows = [];
    _this7.timeout = 200;
    _this7.BROADCAST = "__BROADCAST__";
    if (opt) {
      Object.assign(_assertThisInitialized(_this7), opt);
    }
    onDOM2(window, "storage", function(ev) {
      if (ev.key === _this7.storageName) {
        var event = JSON.parse(ev.newValue);
        if (!event.targets || event.targets.includes(_this7.id)) {
          var _this8;
          (_this8 = _this7).emitLocal.apply(_this8, [event.name].concat(_toConsumableArray(event.args)));
        }
      }
    });
    _this7.id = randString();
    _this7.windows = [_this7.id];
    _this7.ready = new Promise(function(resolve, reject) {
      _this7.onceTimeout("_windows_updated", function(_ref) {
        var windows = _ref.windows;
        _this7.windows = windows;
      }, _this7.timeout).promise.then(function() {
        resolve();
      }, function() {
        resolve();
      });
      _this7.broadcast("_join", _this7.id);
    });
    _this7.ready.then(function() {
      _this7.on("_join", function(id) {
        _this7.windows.push(id);
        if (_this7.isMain()) {
          _this7.broadcast("_windows_updated", {
            windows: _this7.windows,
            type: "join",
            id
          });
        }
      });
      _this7.on("_windows_updated", function(_ref2) {
        var windows = _ref2.windows;
        _this7.windows = windows;
      });
      _this7.on("_exit", function(id) {
        var oldMain = _this7.windows[0];
        arrayRemove2(_this7.windows, id);
        if (_this7.isMain()) {
          _this7.emit("_windows_updated", {
            windows: _this7.windows,
            type: "exit",
            id
          });
          if (oldMain != _this7.id) {
            _this7.emit("_main_updated", {
              windows: _this7.windows,
              old: oldMain,
              new: _this7.id
            });
          }
        }
      });
      onDOM2(window, "beforeunload", function() {
        _this7.exitGroup();
      });
    });
    return _this7;
  }
  _createClass(CrossWindowEventProcessor3, [{
    key: "isMain",
    value: function isMain() {
      return this.id === this.windows[0];
    }
  }, {
    key: "emitTo",
    value: function emitTo(name, targets2) {
      for (var _len9 = arguments.length, args2 = new Array(_len9 > 2 ? _len9 - 2 : 0), _key10 = 2; _key10 < _len9; _key10++) {
        args2[_key10 - 2] = arguments[_key10];
      }
      if (targets2 === this.BROADCAST) {
        targets2 = null;
      } else {
        if (targets2 && !isArray2(targets2)) {
          targets2 = [targets2];
        }
        if (targets2.includes(this.id)) {
          var _get2;
          (_get2 = _get(_getPrototypeOf(CrossWindowEventProcessor3.prototype), "emit", this)).call.apply(_get2, [this, name].concat(args2));
        }
      }
      glb2().localStorage.setItem(this.storageName, JSON.stringify({
        name,
        targets: targets2,
        args: args2,
        // use random make storage event triggered every time
        // 加入随机保证触发storage事件
        random: Math.random()
      }));
    }
  }, {
    key: "emitLocal",
    value: function emitLocal(name) {
      for (var _len10 = arguments.length, args2 = new Array(_len10 > 1 ? _len10 - 1 : 0), _key11 = 1; _key11 < _len10; _key11++) {
        args2[_key11 - 1] = arguments[_key11];
      }
      this.emitTo.apply(this, [name, this.id].concat(args2));
    }
  }, {
    key: "broadcast",
    value: function broadcast(name) {
      for (var _len11 = arguments.length, args2 = new Array(_len11 > 1 ? _len11 - 1 : 0), _key12 = 1; _key12 < _len11; _key12++) {
        args2[_key12 - 1] = arguments[_key12];
      }
      this.emitTo.apply(this, [name, this.BROADCAST].concat(args2));
    }
  }, {
    key: "emit",
    value: function emit(name) {
      for (var _len12 = arguments.length, args2 = new Array(_len12 > 1 ? _len12 - 1 : 0), _key13 = 1; _key13 < _len12; _key13++) {
        args2[_key13 - 1] = arguments[_key13];
      }
      this.emitTo.apply(this, [name, this.windows].concat(args2));
    }
  }, {
    key: "exitGroup",
    value: function exitGroup() {
      this.broadcast("_exit", this.id);
    }
  }]);
  return CrossWindowEventProcessor3;
}(EventProcessor2);
var Cache2 = function() {
  function Cache4() {
    _classCallCheck(this, Cache4);
    this.store = {};
  }
  _createClass(Cache4, [{
    key: "has",
    value: function has(name) {
      return this.store.hasOwnProperty(name);
    }
  }, {
    key: "remember",
    value: function remember(name, getter) {
      if (!this.has(name)) {
        this.store[name] = {
          value: getter()
        };
      }
      return this.store[name].value;
    }
  }, {
    key: "forget",
    value: function forget(name) {
      if (name) {
        if (this.has(name)) {
          delete this.store[name];
        }
      } else {
        this.store = {};
      }
    }
  }]);
  return Cache4;
}();

// node_modules/vue-functions/dist/vue-functions.esm.js
var _marked3 = import_regenerator3.default.mark(iterateObjectWithoutDollarDash);
function isPropTrue(value) {
  return value === "" || value;
}
function iterateObjectWithoutDollarDash(obj) {
  var key, start;
  return import_regenerator3.default.wrap(function iterateObjectWithoutDollarDash$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.t0 = import_regenerator3.default.keys(obj);
        case 1:
          if ((_context.t1 = _context.t0()).done) {
            _context.next = 9;
            break;
          }
          key = _context.t1.value;
          start = key.substr(0, 1);
          if (!(start !== "$" && start !== "_")) {
            _context.next = 7;
            break;
          }
          _context.next = 7;
          return {
            key,
            value: obj[key]
          };
        case 7:
          _context.next = 1;
          break;
        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _marked3);
}

// node_modules/vue-draggable-nested-tree/dist/vue-draggable-nested-tree.esm.js
var script = {
  name: "TreeNode",
  props: {
    data: {},
    store: {},
    level: {
      default: 0
    }
    // readonly
  },
  data() {
    return {
      vm: this
    };
  },
  computed: {
    childrenLevel() {
      return this.level + 1;
    },
    isRoot() {
      return this.data && this.data.isRoot;
    },
    childrenVisible() {
      var {
        data
      } = this;
      return this.isRoot || data && data.children && data.children.length && data.open;
    },
    innerBackStyle() {
      var r = {
        marginBottom: this.store.space + "px"
      };
      if (!this.isRoot && this.level > 1) {
        r.paddingLeft = (this.level - 1) * this.store.indent + "px";
      }
      return r;
    }
  },
  watch: {
    data: {
      immediate: true,
      handler(data) {
        if (data) {
          data._vm = this;
          if (!data._treeNodePropertiesCompleted && !data.isRoot) {
            this.store.compeleteNode(data, this.$parent.data);
          }
        }
      }
    }
  }
  // methods: {},
  // created() {},
  // mounted() {},
};
var __vue_script__ = script;
var __vue_render__ = function __vue_render__2() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    staticClass: "tree-node",
    class: [_vm.data.active ? _vm.store.activatedClass : "", _vm.data.open ? _vm.store.openedClass : "", _vm.data.class],
    style: _vm.data.style,
    attrs: {
      id: _vm.data._id
    }
  }, [!_vm.isRoot ? _vm._t("node-inner-back", [_c("div", {
    staticClass: "tree-node-inner-back",
    class: [_vm.data.innerBackClass],
    style: [_vm.innerBackStyle, _vm.data.innerBackStyle]
  }, [_c("div", {
    staticClass: "tree-node-inner",
    class: [_vm.data.innerClass],
    style: [_vm.data.innerStyle]
  }, [_vm._t("default", null, {
    data: _vm.data,
    store: _vm.store,
    vm: _vm.vm
  })], 2)])], {
    styleObj: _vm.innerBackStyle,
    data: _vm.data,
    store: _vm.store,
    vm: _vm.vm
  }) : _vm._e(), _c("transition", {
    attrs: {
      name: _vm.store.childrenTransitionName
    }
  }, [_vm.childrenVisible ? _c("div", {
    staticClass: "tree-node-children"
  }, _vm._l(_vm.data.children, function(child) {
    return _c("TreeNode", {
      key: child._id,
      attrs: {
        data: child,
        store: _vm.store,
        level: _vm.childrenLevel
      },
      scopedSlots: _vm._u([{
        key: "default",
        fn: function fn(props) {
          return [_vm._t("default", null, {
            data: props.data,
            store: props.store,
            vm: props.vm
          })];
        }
      }, {
        key: "node-inner-back",
        fn: function fn(props) {
          return _vm.store.customInnerBack ? [_vm._t("node-inner-back", null, {
            styleObj: props.styleObj,
            data: props.data,
            store: props.store,
            vm: props.vm
          })] : void 0;
        }
      }], null, true)
    });
  }), 1) : _vm._e()])], 2);
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;
var __vue_inject_styles__ = void 0;
var __vue_scope_id__ = void 0;
var __vue_module_identifier__ = void 0;
var __vue_is_functional_template__ = false;
var __vue_component__ = normalize_component_default({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, void 0, void 0, void 0);
var script$1 = {
  props: {
    data: {},
    idLength: {
      type: Number,
      default: 5
    },
    indent: {
      type: Number,
      default: 16
    },
    activatedClass: {
      default: "active"
    },
    openedClass: {
      default: "open"
    },
    space: {
      type: Number,
      default: 10
    },
    // space between node, unit px
    childrenTransitionName: {},
    // there are issues under draggable tree
    customInnerBack: {}
  },
  components: {
    TreeNode: __vue_component__
  },
  data() {
    return {
      store: this,
      rootData: null
    };
  },
  // computed: {},
  watch: {
    data: {
      immediate: true,
      handler(data, old) {
        if (data === old) {
          return;
        }
        this.rootData = this.rootData || {
          isRoot: true,
          _id: "tree_".concat(this._uid, "_node_root"),
          children: []
        };
        breadthFirstSearch(data, (node, k, parent) => {
          this.compeleteNode(node, parent);
        });
        this.rootData.children = data;
      }
    }
  },
  methods: {
    compeleteNode(node, parent) {
      var compeletedData = {
        open: true,
        children: [],
        active: false,
        style: {},
        class: "",
        innerStyle: {},
        innerClass: "",
        innerBackStyle: {},
        innerBackClass: {}
      };
      for (var key in compeletedData) {
        if (!node.hasOwnProperty(key)) {
          this.$set(node, key, compeletedData[key]);
        }
      }
      this.$set(node, "parent", parent || this.rootData);
      if (!node.hasOwnProperty("_id")) {
        node._id = "tree_".concat(this._uid, "_node_").concat(strRand(this.idLength));
      }
      node._treeNodePropertiesCompleted = true;
    },
    // pure node self
    pure(node, withChildren, after) {
      var t = Object.assign({}, node);
      delete t._id;
      delete t.parent;
      delete t.children;
      delete t.open;
      delete t.active;
      delete t.style;
      delete t.class;
      delete t.innerStyle;
      delete t.innerClass;
      delete t.innerBackStyle;
      delete t.innerBackClass;
      for (var key of Object.keys(t)) {
        if (key[0] === "_") {
          delete t[key];
        }
      }
      if (withChildren && node.children) {
        t.children = node.children.slice();
        t.children.forEach((v, k) => {
          t.children[k] = this.pure(v, withChildren);
        });
      }
      if (after) {
        return after(t, node) || t;
      }
      return t;
    },
    getNodeById(id) {
      var r;
      breadthFirstSearch(this.rootData.children, (node) => {
        if (node._id === id) {
          r = node;
          return false;
        }
      });
      return r;
    },
    getActivated() {
      var r = [];
      breadthFirstSearch(this.rootData.children, (node) => {
        if (node.active) {
          r.push(node);
        }
      });
      return r;
    },
    getOpened() {
      var r = [];
      breadthFirstSearch(this.rootData.children, (node) => {
        if (node.open) {
          r.push(node);
        }
      });
      return r;
    },
    activeNode(node, inactiveOld) {
      if (inactiveOld) {
        this.getActivated().forEach((node2) => {
          node2.active = false;
        });
      }
      node.active = true;
    },
    toggleActive(node, inactiveOld) {
      if (node.active) {
        node.active = false;
      } else {
        this.activeNode(node, inactiveOld);
      }
    },
    openNode(node, closeOld) {
      if (closeOld) {
        this.getOpened().forEach((node2) => {
          node2.open = false;
          this.$emit("nodeOpenChanged", node2);
        });
      }
      node.open = true;
      this.$emit("nodeOpenChanged", node);
    },
    toggleOpen(node, closeOld) {
      if (node.open) {
        node.open = false;
        this.$emit("nodeOpenChanged", node);
      } else {
        this.openNode(node, closeOld);
      }
    },
    getPureData(after) {
      return this.pure(this.rootData, true, after).children;
    },
    deleteNode(node) {
      return arrayRemove(node.parent.children, node);
    }
  }
  // created() {},
  // mounted() {},
};
var __vue_script__$1 = script$1;
var __vue_render__$1 = function __vue_render__3() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    staticClass: "he-tree tree"
  }, [_c("TreeNode", {
    attrs: {
      data: _vm.rootData,
      store: _vm.store
    },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(props) {
        return [_vm._t("default", null, {
          data: props.data,
          store: _vm.store,
          vm: props.vm
        })];
      }
    }, {
      key: "node-inner-back",
      fn: function fn(props) {
        return _vm.customInnerBack ? [_vm._t("node-inner-back", null, {
          styleObj: props.styleObj,
          data: props.data,
          store: props.store,
          vm: props.vm
        })] : void 0;
      }
    }], null, true)
  })], 1);
};
var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;
var __vue_inject_styles__$1 = void 0;
var __vue_scope_id__$1 = void 0;
var __vue_module_identifier__$1 = void 0;
var __vue_is_functional_template__$1 = false;
var __vue_component__$1 = normalize_component_default({
  render: __vue_render__$1,
  staticRenderFns: __vue_staticRenderFns__$1
}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, void 0, void 0, void 0);
var Cache3 = class {
  constructor() {
    _defineProperty(this, "store", {});
  }
  has(name) {
    return this.store.hasOwnProperty(name);
  }
  remember(name, getter) {
    if (!this.has(name)) {
      this.store[name] = {
        value: getter()
      };
    }
    return this.store[name].value;
  }
  forget(name) {
    if (name) {
      if (this.has(name)) {
        delete this.store[name];
      }
    } else {
      this.store = {};
    }
  }
};
function attachCache(obj, cache, toCache) {
  var _loop3 = function _loop4(key2) {
    Object.defineProperty(obj, key2, {
      get() {
        return cache.remember(key2, () => toCache[key2].call(this));
      }
    });
  };
  for (var key in toCache) {
    _loop3(key);
  }
}
if (!document.elementsFromPoint) {
  document.elementsFromPoint = elementsFromPoint;
}
function elementsFromPoint(x, y) {
  var parents = [];
  var parent = void 0;
  do {
    if (parent !== document.elementFromPoint(x, y)) {
      parent = document.elementFromPoint(x, y);
      parents.push(parent);
      parent.style.pointerEvents = "none";
    } else {
      parent = false;
    }
  } while (parent);
  parents.forEach(function(parent2) {
    return parent2.style.pointerEvents = "all";
  });
  return parents;
}
function getTreeByPoint(x, y, trees2) {
  var els = document.elementsFromPoint(x, y);
  var treeEl;
  var nodeEl;
  var betweenEls = [];
  for (var el of els) {
    if (!nodeEl) {
      if (hasClass(el, "tree-node")) {
        nodeEl = el;
      }
    } else {
      if (hasClass(el, "tree")) {
        treeEl = el;
        break;
      }
      betweenEls.push(el);
    }
  }
  if (treeEl) {
    var covered = false;
    if (!isParent(nodeEl, treeEl)) {
      for (var _el of betweenEls) {
        if (!isParent(_el, treeEl)) {
          covered = true;
          break;
        }
      }
    }
    if (!covered) {
      return trees2.find((v) => v.$el === treeEl);
    }
  }
}
function isParent(child, parent) {
  var cur = child;
  while (cur) {
    cur = cur.parentNode;
    if (cur === parent) {
      return true;
    }
  }
}
var targets = {
  "nothing": (info) => {
  },
  "after": (info) => {
    insertDplhAfterTo(info.dplh, info.targetNode);
  },
  "before": (info) => {
    if (isNodeDroppable(info.targetNode.parent)) {
      insertBefore(info.dplh, info.targetNode);
    } else {
      insertDplhAfterTo(info.dplh, info.targetNode.parent);
    }
  },
  "append": (info) => {
    if (isNodeDroppable(info.targetNode)) {
      appendTo(info.dplh, info.targetNode);
      if (!info.targetNode.open)
        info.store.toggleOpen(info.targetNode);
    } else {
      insertDplhAfterTo(info.dplh, info.targetNode);
    }
  },
  "prepend": (info) => {
    if (isNodeDroppable(info.targetNode)) {
      prependTo(info.dplh, info.targetNode);
      if (!info.targetNode.open)
        info.store.toggleOpen(info.targetNode);
    } else {
      insertDplhAfterTo(info.dplh, info.targetNode);
    }
  },
  "after target parent": (info) => {
    insertDplhAfterTo(info.dplh, info.targetNode.parent);
  },
  // append to prev sibling
  "append prev": (info) => {
    if (isNodeDroppable(info.targetPrev)) {
      appendTo(info.dplh, info.targetPrev);
      if (!info.targetPrev.open)
        info.store.toggleOpen(info.targetPrev);
    } else {
      insertDplhAfterTo(info.dplh, info.targetPrev);
    }
  },
  // append to current tree
  "append current tree": (info) => {
    if (isNodeDroppable(info.currentTree.rootData)) {
      appendTo(info.dplh, info.currentTree.rootData);
    }
  }
};
function insertDplhAfterTo(dplh2, targetNode, info) {
  if (!targetNode) {
    return false;
  } else {
    var closest = findParent(targetNode, (node) => node.parent && isNodeDroppable(node.parent));
    if (closest) {
      insertAfter(dplh2, closest);
    } else {
      return false;
    }
  }
  return true;
}
function isNodeDraggable(node) {
  if (!draggableIds.hasOwnProperty(node._id)) {
    var r;
    if (node.hasOwnProperty("draggable")) {
      r = node.draggable;
    } else if (node.parent) {
      r = isNodeDraggable(node.parent);
    } else {
      r = true;
    }
    draggableIds[node._id] = r;
  }
  return draggableIds[node._id];
}
function isNodeDroppable(node) {
  if (!droppableIds.hasOwnProperty(node._id)) {
    var r;
    if (node.hasOwnProperty("droppable")) {
      r = node.droppable;
    } else if (node.parent) {
      r = isNodeDroppable(node.parent);
    } else {
      r = true;
    }
    droppableIds[node._id] = r;
  }
  return droppableIds[node._id];
}
function findChild(info, children, handler, reverse) {
  var len = children.length;
  if (reverse) {
    for (var i = len - 1; i >= 0; i--) {
      var item = children[i];
      if (item !== info.node) {
        if (handler(item, i)) {
          return item;
        }
      }
    }
  } else {
    for (var _i = 0; _i < len; _i++) {
      var _item = children[_i];
      if (_item !== info.node) {
        if (handler(_item, _i)) {
          return _item;
        }
      }
    }
  }
}
function findParent(node, handle) {
  var current = node;
  while (current) {
    if (handle(current)) {
      return current;
    }
    current = current.parent;
  }
}
var rules = {
  // 另一节点存在
  "targetNode existed": (info) => info.targetNode,
  // 另一节点是拖动占位节点
  "targetNode is placeholder": (info) => info.targetNode.isDragPlaceHolder,
  // 另一节点在最上面
  "targetNode at top": (info) => info.targetAtTop,
  // 另一节点在最下面
  "targetNode at bottom": (info) => info.targetAtBottom,
  // 另一节点是根节点第二个子
  "targetNode is the second child of root": (info) => info.currentTreeRootSecondChildExcludingDragging === info.targetNode,
  // 拖动点坐标在任一树中, 同时, 起始树要可拖出, 当前树要可拖入
  "currentTree existed": (info) => info.currentTree,
  // 当前树为空(不包括占位节点)
  "currentTree empty": (info) => !findChild(info, info.currentTree.rootData.children, (v) => v),
  // 占位节点存在
  "placeholder existed": (info) => info.dplhEl,
  // 占位节点在当前树中
  "placeholder in currentTree": (info) => info.dplhElInCurrentTree,
  // 占位节点在最上面
  "placeholder at top": (info) => info.dplhAtTop,
  // 另一节点是打开的
  "targetNode is open": (info) => info.targetNode.open,
  // 另一节点有子(不包括占位节点)
  "targetNode has children excluding placeholder": (info) => findChild(info, info.targetNode.children, (v) => v !== info.dplh),
  // 另一节点是第一个节点
  "targetNode is 1st child": (info) => findChild(info, info.targetNode.parent.children, (v) => v) === info.targetNode,
  // 另一节点是最后节点
  "targetNode is last child": (info) => findChild(info, info.targetNode.parent.children, (v) => v, true) === info.targetNode,
  // 当前位置在另一节点inner垂直中线上
  "on targetNode middle": (info) => info.offset.y <= info.tiMiddleY,
  // 当前位置在另一节点inner左边
  "at left": (info) => info.offset.x < info.tiOffset.x,
  // 当前位置在另一节点innner indent位置右边
  "at indent right": (info) => info.offset.x > info.tiOffset.x + info.currentTree.indent
};
var _loop = function _loop2(key) {
  var old = rules[key];
  rules[key] = function() {
    return Boolean(old(...arguments));
  };
};
for (key of Object.keys(rules)) {
  _loop(key);
}
var key;
var prevTree;
var droppableIds = {};
var draggableIds = {};
function autoMoveDragPlaceHolder(draggableHelperInfo) {
  var trees2 = this.store.trees;
  var dhStore = draggableHelperInfo.store;
  var info = {
    event: draggableHelperInfo.event,
    el: dhStore.el,
    vm: this,
    node: this.data,
    store: this.store,
    dplh: this.store.dplh,
    draggableHelperData: {
      opt: draggableHelperInfo.options,
      store: dhStore
    }
  };
  attachCache(info, new Cache3(), {
    // dragging node coordinate
    // 拖动中的节点相关坐标
    nodeInnerEl() {
      return this.el.querySelector(".tree-node-inner");
    },
    offset() {
      return getOffset(this.nodeInnerEl);
    },
    // left top point
    offset2() {
      return {
        x: this.offset.x + this.nodeInnerEl.offsetWidth,
        y: this.offset.y + this.nodeInnerEl.offsetHeight
      };
    },
    // right bottom point
    offsetToViewPort() {
      var r = this.nodeInnerEl.getBoundingClientRect();
      r.x = r.left;
      r.y = r.top;
      return r;
    },
    // tree
    currentTree() {
      var currentTree = getTreeByPoint(this.offsetToViewPort.x, this.offsetToViewPort.y, trees2);
      if (currentTree) {
        var dragStartTree = this.store;
        if (prevTree == null) {
          prevTree = dragStartTree;
        }
        if (prevTree !== currentTree) {
          if (!isPropTrue(dragStartTree.crossTree) || !isPropTrue(currentTree.crossTree)) {
            return;
          }
          prevTree = currentTree;
        }
        if (!isPropTrue(currentTree.droppable)) {
          return;
        }
        return currentTree;
      }
    },
    currentTreeRootEl() {
      return document.getElementById(this.currentTree.rootData._id);
    },
    currentTreeRootOf4() {
      return getOf4(this.currentTreeRootEl, this.currentTree.space);
    },
    // the second child of currentTree root, excluding dragging node
    currentTreeRootSecondChildExcludingDragging() {
      return this.currentTree.rootData.children.slice(0, 3).filter((v) => v !== this.node)[1];
    },
    // placeholder
    dplhEl() {
      return document.getElementById(this.dplh._id);
    },
    dplhElInCurrentTree() {
      return Boolean(this.currentTree.$el.querySelector("#".concat(this.dplh._id)));
    },
    dplhOf4() {
      return getOf4(this.dplhEl, this.currentTree.space);
    },
    dplhAtTop() {
      return Math.abs(this.dplhOf4.y - this.currentTreeRootOf4.y) < 5;
    },
    targetAtTop() {
      return Math.abs(this.tiOf4.y - this.currentTreeRootOf4.y) < 5;
    },
    targetAtBottom() {
      return Math.abs(this.tiOf4.y2 - this.currentTreeRootOf4.y2) < 5;
    },
    // most related node
    // 最相关的另一个节点
    targetNode() {
      var {
        currentTree
      } = this;
      if (!currentTree) {
        throw "no currentTree";
      }
      var {
        x,
        y
      } = this.offset;
      var currentNode = currentTree.rootData;
      while (true) {
        var children = currentNode.children;
        if (!children) {
          break;
        }
        if (this.node.parent === currentNode) {
          children = children.slice();
          children.splice(children.indexOf(this.node), 1);
        }
        if (children.length === 0) {
          break;
        }
        var t = binarySearch(children, (node) => {
          var el = document.getElementById(node._id);
          var ty = getOffset(el).y;
          var ty2 = ty + el.offsetHeight + currentTree.space;
          if (ty2 < y) {
            return -1;
          } else if (ty <= y) {
            return 0;
          } else {
            return 1;
          }
        }, null, null, true);
        if (t.hit) {
          currentNode = t.value;
        } else {
          if (t.bigger) {
            currentNode = children[t.index - 1];
          } else {
            currentNode = t.value;
          }
        }
        if (!currentNode) {
          currentNode = children[0];
          break;
        }
        if (!currentNode) {
          break;
        }
        var innerEl = document.getElementById(currentNode._id).querySelector(".tree-node-inner");
        var of = getOf4(innerEl, currentTree.space);
        if (of.y <= y && y <= of.y2) {
          break;
        }
      }
      return currentNode;
    },
    targetNodeEl() {
      return document.getElementById(this.targetNode._id);
    },
    // targetNodeInnerElOffset
    tiInnerEl() {
      return this.targetNodeEl.querySelector(".tree-node-inner");
    },
    tiOffset() {
      return getOffset(this.tiInnerEl);
    },
    tiOf4() {
      return getOf4(this.tiInnerEl, this.currentTree.space);
    },
    tiMiddleY() {
      return this.tiOffset.y + this.tiInnerEl.offsetHeight / 2;
    },
    //
    targetPrevEl() {
      var r = this.targetNodeEl.previousSibling;
      if (hasClass(r, "dragging")) {
        r = r.previousSibling;
      }
      return r;
    },
    targetPrev() {
      var id = this.targetPrevEl.getAttribute("id");
      return this.currentTree.getNodeById(id);
    }
  });
  var executedRuleCache = {};
  var exec = (ruleId) => {
    if (!executedRuleCache.hasOwnProperty(ruleId)) {
      var r;
      try {
        r = rules[ruleId](info);
      } catch (e) {
        r = e;
        try {
          if (process.env.DEVELOPE_SELF) {
            console.warn("failed to execute rule '".concat(ruleId, "'"), e);
          }
        } catch (e2) {
        }
      }
      executedRuleCache[ruleId] = r;
    }
    return executedRuleCache[ruleId];
  };
  if (exec("currentTree existed") === true) {
    if (exec("targetNode is placeholder") === false) {
      if (exec("targetNode is the second child of root") === true) {
        if (exec("targetNode has children excluding placeholder") === false) {
          if (exec("on targetNode middle") === true) {
            targets["before"](info);
          } else if (exec("on targetNode middle") === false) {
            if (exec("at indent right") === true) {
              targets["append"](info);
            } else if (exec("at indent right") === false) {
              targets["after"](info);
            }
          }
        } else if (exec("targetNode has children excluding placeholder") === true) {
          targets["prepend"](info);
        }
      } else if (exec("targetNode is the second child of root") === false) {
        if (exec("currentTree empty") === false) {
          if (exec("targetNode at top") === true) {
            if (exec("placeholder in currentTree") === true) {
              if (exec("targetNode has children excluding placeholder") === false) {
                if (exec("on targetNode middle") === false) {
                  if (exec("at indent right") === false) {
                    targets["after"](info);
                  } else if (exec("at indent right") === true) {
                    targets["append"](info);
                  }
                } else if (exec("on targetNode middle") === true) {
                  targets["before"](info);
                }
              } else if (exec("targetNode has children excluding placeholder") === true) {
                if (exec("on targetNode middle") === false) {
                  targets["prepend"](info);
                } else if (exec("on targetNode middle") === true) {
                  targets["before"](info);
                }
              }
            } else if (exec("placeholder in currentTree") === false) {
              targets["before"](info);
            }
          } else if (exec("targetNode at top") === false) {
            if (exec("targetNode at bottom") === false) {
              if (exec("placeholder at top") === true) {
                targets["prepend"](info);
              } else if (exec("placeholder at top") === false) {
                if (exec("targetNode has children excluding placeholder") === true) {
                  targets["prepend"](info);
                } else if (exec("targetNode has children excluding placeholder") === false) {
                  if (exec("targetNode is 1st child") === false) {
                    if (exec("targetNode is last child") === false) {
                      if (exec("on targetNode middle") === true) {
                        if (exec("at indent right") === true) {
                          targets["append"](info);
                        } else if (exec("at indent right") === false) {
                          targets["after"](info);
                        }
                      } else if (exec("on targetNode middle") === false) {
                        if (exec("at indent right") === true) {
                          targets["append"](info);
                        } else if (exec("at indent right") === false) {
                          targets["after"](info);
                        }
                      }
                    } else if (exec("targetNode is last child") === true) {
                      if (exec("at indent right") === true) {
                        targets["append"](info);
                      } else if (exec("at indent right") === false) {
                        targets["after"](info);
                      }
                    }
                  } else if (exec("targetNode is 1st child") === true) {
                    if (exec("targetNode is last child") === true) {
                      targets["append"](info);
                    } else if (exec("targetNode is last child") === false) {
                      if (exec("on targetNode middle") === false) {
                        if (exec("at indent right") === false) {
                          targets["after"](info);
                        } else if (exec("at indent right") === true) {
                          targets["append"](info);
                        }
                      } else if (exec("on targetNode middle") === true) {
                        if (exec("at indent right") === false) {
                          targets["after"](info);
                        } else if (exec("at indent right") === true) {
                          targets["append"](info);
                        }
                      }
                    }
                  }
                }
              }
            } else if (exec("targetNode at bottom") === true) {
              if (exec("placeholder in currentTree") === true) {
                if (exec("on targetNode middle") === false) {
                  if (exec("at indent right") === true) {
                    targets["append"](info);
                  } else if (exec("at indent right") === false) {
                    targets["after"](info);
                  }
                } else if (exec("on targetNode middle") === true) {
                  targets["append"](info);
                }
              } else if (exec("placeholder in currentTree") === false) {
                targets["append"](info);
              }
            }
          }
        } else if (exec("currentTree empty") === true) {
          targets["append current tree"](info);
        }
      }
    } else if (exec("targetNode is placeholder") === true) {
      if (exec("targetNode at bottom") === false) {
        if (exec("targetNode is the second child of root") === false) {
          if (exec("targetNode is 1st child") === true) {
            if (exec("targetNode is last child") === false) {
              targets["nothing"](info);
            } else if (exec("targetNode is last child") === true) {
              if (exec("on targetNode middle") === false) {
                if (exec("at left") === true) {
                  targets["after target parent"](info);
                } else if (exec("at left") === false) {
                  targets["nothing"](info);
                }
              } else if (exec("on targetNode middle") === true) {
                if (exec("at left") === true) {
                  targets["after target parent"](info);
                } else if (exec("at left") === false) {
                  targets["nothing"](info);
                }
              }
            }
          } else if (exec("targetNode is 1st child") === false) {
            if (exec("targetNode is last child") === true) {
              if (exec("on targetNode middle") === true) {
                if (exec("at left") === true) {
                  targets["after target parent"](info);
                } else if (exec("at left") === false) {
                  if (exec("at indent right") === true) {
                    targets["append prev"](info);
                  } else if (exec("at indent right") === false) {
                    targets["nothing"](info);
                  }
                }
              } else if (exec("on targetNode middle") === false) {
                if (exec("at left") === true) {
                  targets["after target parent"](info);
                } else if (exec("at left") === false) {
                  if (exec("at indent right") === true) {
                    targets["append prev"](info);
                  } else if (exec("at indent right") === false) {
                    targets["nothing"](info);
                  }
                }
              }
            } else if (exec("targetNode is last child") === false) {
              if (exec("on targetNode middle") === true) {
                if (exec("at left") === true) {
                  targets["nothing"](info);
                } else if (exec("at left") === false) {
                  if (exec("at indent right") === true) {
                    targets["append prev"](info);
                  } else if (exec("at indent right") === false) {
                    targets["nothing"](info);
                  }
                }
              } else if (exec("on targetNode middle") === false) {
                if (exec("at left") === true) {
                  targets["nothing"](info);
                } else if (exec("at left") === false) {
                  if (exec("at indent right") === true) {
                    targets["append prev"](info);
                  } else if (exec("at indent right") === false) {
                    targets["nothing"](info);
                  }
                }
              }
            }
          }
        } else if (exec("targetNode is the second child of root") === true) {
          if (exec("on targetNode middle") === true) {
            if (exec("at indent right") === true) {
              targets["append prev"](info);
            } else if (exec("at indent right") === false) {
              targets["nothing"](info);
            }
          } else if (exec("on targetNode middle") === false) {
            if (exec("at indent right") === true) {
              targets["append prev"](info);
            } else if (exec("at indent right") === false) {
              targets["nothing"](info);
            }
          }
        }
      } else if (exec("targetNode at bottom") === true) {
        if (exec("targetNode is 1st child") === true) {
          if (exec("on targetNode middle") === false) {
            if (exec("at left") === true) {
              targets["after target parent"](info);
            } else if (exec("at left") === false) {
              targets["nothing"](info);
            }
          } else if (exec("on targetNode middle") === true) {
            if (exec("at left") === false) {
              targets["nothing"](info);
            } else if (exec("at left") === true) {
              targets["after target parent"](info);
            }
          }
        } else if (exec("targetNode is 1st child") === false) {
          if (exec("on targetNode middle") === false) {
            if (exec("at left") === true) {
              targets["after target parent"](info);
            } else if (exec("at left") === false) {
              if (exec("at indent right") === true) {
                targets["append prev"](info);
              } else if (exec("at indent right") === false) {
                targets["nothing"](info);
              }
            }
          } else if (exec("on targetNode middle") === true) {
            if (exec("at left") === true) {
              targets["after target parent"](info);
            } else if (exec("at left") === false) {
              if (exec("at indent right") === true) {
                targets["append prev"](info);
              } else if (exec("at indent right") === false) {
                targets["nothing"](info);
              }
            }
          }
        }
      }
    }
  } else if (exec("currentTree existed") === false) {
    targets["nothing"](info);
  }
}
function getOf4(el, space) {
  var r = getOffset(el);
  r.x2 = r.x + el.offsetWidth;
  r.y2 = r.y + el.offsetHeight + space;
  return r;
}
autoMoveDragPlaceHolder.dragStart = function dragStart() {
};
autoMoveDragPlaceHolder.dragEnd = function dragEnd() {
  prevTree = null;
  droppableIds = {};
  draggableIds = {};
};
var script$2 = {
  extends: __vue_component__,
  name: "TreeNode",
  mounted() {
    this.store.isNodeDraggable = isNodeDraggable;
    this.store.isNodeDroppable = isNodeDroppable;
    if (this.isRoot || this.data.isDragPlaceHolder) {
      return;
    }
    var {
      dplh: dplh2
    } = this.store;
    this.$watch("store.draggable", (draggable) => {
      if (isPropTrue(draggable)) {
        var triggerEl = this.store.getTriggerEl ? this.store.getTriggerEl(this) : this.$el.querySelector(".tree-node-inner");
        this._draggableDestroy = draggable_helper_es_default(triggerEl, {
          preventSelect: isPropTrue(this.store.preventSelect),
          // trigger el
          getEl: () => this.$el,
          minTranslate: 10,
          drag: (e, opt, store3) => {
            autoMoveDragPlaceHolder.dragStart();
            var draggableHelperInfo = {
              event: e,
              options: opt,
              store: store3
            };
            if (this.store.ondragstart && this.store.ondragstart(this.data, draggableHelperInfo) === false) {
              return false;
            }
            if (!isNodeDraggable(this.data)) {
              return false;
            }
            this.store.$emit("drag", this.data);
            var siblings = this.data.parent.children;
            this.startPosition = {
              siblings,
              index: siblings.indexOf(this.data)
            };
            dplh2.innerStyle.height = store3.el.offsetHeight + "px";
            insertAfter(dplh2, this.data);
            this.data.class += " dragging";
          },
          moving: (e, opt, store3) => {
            if (store3.movedCount === 0) {
              return;
            }
            var draggableHelperInfo = {
              event: e,
              options: opt,
              store: store3
            };
            return autoMoveDragPlaceHolder.call(this, draggableHelperInfo);
          },
          drop: (e, opt, store3) => {
            autoMoveDragPlaceHolder.dragEnd();
            var draggableHelperInfo = {
              event: e,
              options: opt,
              store: store3
            };
            if (this.store.ondragend && this.store.ondragend(this.data, draggableHelperInfo) === false) {
              arrayRemove(dplh2.parent.children, dplh2);
            } else {
              var targetTree = dplh2._vm.store;
              var crossTree = targetTree !== this.store;
              var oldTree = crossTree ? this.store : null;
              insertAfter(this.data, dplh2);
              arrayRemove(dplh2.parent.children, dplh2);
              this.data.class = this.data.class.replace(/(^| )dragging( |$)/g, " ");
              targetTree.$emit("drop", this.data, targetTree, oldTree);
              oldTree && oldTree.$emit("drop", this.data, targetTree, oldTree);
              var siblings = this.data.parent.children;
              if (siblings === this.startPosition.siblings && siblings.indexOf(this.data) === this.startPosition.index)
                ;
              else {
                this.store.$emit("change", this.data, targetTree, oldTree);
                oldTree && oldTree.$emit("change", this.data, targetTree, oldTree);
              }
              this.startPosition = null;
            }
          }
        });
      } else {
        if (this._draggableDestroy) {
          this._draggableDestroy();
          this._draggableDestroy = null;
        }
      }
    }, {
      immediate: true
    });
  }
};
var __vue_script__$2 = script$2;
var __vue_inject_styles__$2 = void 0;
var __vue_scope_id__$2 = void 0;
var __vue_module_identifier__$2 = void 0;
var __vue_is_functional_template__$2 = void 0;
var __vue_component__$2 = normalize_component_default({}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, void 0, void 0, void 0);
var trees = [];
var dplh = {
  _id: "draggable_tree_drag_placeHolder",
  level: null,
  droppable: false,
  isDragPlaceHolder: true,
  class: "draggable-placeholder",
  style: {},
  innerStyle: {},
  innerClass: "draggable-placeholder-inner",
  innerBackStyle: {},
  innerBackClass: "draggable-placeholder-inner-back"
  // children: [],
};
var script$3 = {
  extends: __vue_component__$1,
  props: {
    getTriggerEl: {
      type: Function
    },
    draggable: {},
    droppable: {
      default: true
    },
    crossTree: {},
    ondragstart: {
      type: Function
    },
    ondragend: {
      type: Function
    },
    preventSelect: {
      default: true
    }
  },
  components: {
    TreeNode: __vue_component__$2
  },
  data() {
    return {
      // DragPlaceHolder
      dplh,
      trees
    };
  },
  // computed: {},
  // watch: {},
  // methods: {},
  created() {
    trees.push(this);
  },
  mounted() {
  },
  beforeDestroy() {
    arrayRemove(trees, this);
  }
};
var __vue_script__$3 = script$3;
var __vue_inject_styles__$3 = void 0;
var __vue_scope_id__$3 = void 0;
var __vue_module_identifier__$3 = void 0;
var __vue_is_functional_template__$3 = void 0;
var __vue_component__$3 = normalize_component_default({}, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, false, void 0, void 0, void 0);
export {
  __vue_component__$3 as DraggableTree,
  __vue_component__$2 as DraggableTreeNode,
  __vue_component__$1 as Tree,
  __vue_component__ as TreeNode
};
/*! Bundled license information:

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)

helper-js/dist/helper-js.esm.js:
  (*!
   * helper-js v1.4.38
   * (c) phphe <phphe@outlook.com> (https://github.com/phphe)
   * Homepage: undefined
   * Released under the MIT License.
   *)

tree-helper/dist/tree-helper.esm.js:
  (*!
  * tree-helper v1.4.14
  * (c) phphe <phphe@outlook.com> (https://github.com/phphe)
  * Released under the MIT License.
  *)

drag-event-service/dist/drag-event-service.es.js:
  (*!
   * drag-event-service v0.0.6
   * (c) 2018-present phphe <phphe@outlook.com> (https://github.com/phphe)
   * Released under the MIT License.
   *)

draggable-helper/dist/draggable-helper.es.js:
  (*!
   * draggable-helper v1.0.20
   * (c) 2018-present phphe <phphe@outlook.com> (https://github.com/phphe)
   * Released under the MIT License.
   *)

helper-js/dist/helper-js.esm.js:
  (*!
   * helper-js v2.0.7
   * (c) phphe <phphe@outlook.com> (https://github.com/phphe)
   * Homepage: null
   * Released under the MIT License.
   *)

vue-functions/dist/vue-functions.esm.js:
  (*!
   * vue-functions v2.0.6
   * (c) phphe <phphe@outlook.com> (https://github.com/phphe)
   * Homepage: undefined
   * Released under the MIT License.
   *)

vue-draggable-nested-tree/dist/vue-draggable-nested-tree.esm.js:
  (*!
   * vue-draggable-nested-tree v3.0.0-beta
   * (c) phphe <phphe@outlook.com> (https://github.com/phphe)
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=vue-draggable-nested-tree.js.map
